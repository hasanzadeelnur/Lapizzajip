// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250902082122_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AboutUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FirstBody")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("FirstBody");

                    b.Property<string>("FirstImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("FirstImagePath");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MetaDescription");

                    b.Property<string>("MetaKeys")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MetaKeys");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MetaTitle");

                    b.Property<string>("SecondBody")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("SecondBody");

                    b.Property<string>("SecondImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("SecondImagePath");

                    b.Property<string>("StoryBody")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("StoryBody");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AboutUs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3ed0380-1c80-45e8-b39e-37a43c8ae815"),
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstBody = "",
                            FirstImagePath = "",
                            LanguageKey = "ko",
                            MetaDescription = "",
                            MetaKeys = "",
                            MetaTitle = "",
                            SecondBody = "",
                            SecondImagePath = "",
                            StoryBody = ""
                        },
                        new
                        {
                            Id = new Guid("6192bb73-9d91-4ab6-8889-bb5665ea40fd"),
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstBody = "",
                            FirstImagePath = "",
                            LanguageKey = "az",
                            MetaDescription = "",
                            MetaKeys = "",
                            MetaTitle = "",
                            SecondBody = "",
                            SecondImagePath = "",
                            StoryBody = ""
                        },
                        new
                        {
                            Id = new Guid("782a1df2-f4a0-4a08-88fe-47f5923f7f5b"),
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstBody = "",
                            FirstImagePath = "",
                            LanguageKey = "en",
                            MetaDescription = "",
                            MetaKeys = "",
                            MetaTitle = "",
                            SecondBody = "",
                            SecondImagePath = "",
                            StoryBody = ""
                        },
                        new
                        {
                            Id = new Guid("3136a22e-e622-4f41-a416-cc1161483611"),
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstBody = "",
                            FirstImagePath = "",
                            LanguageKey = "ru",
                            MetaDescription = "",
                            MetaKeys = "",
                            MetaTitle = "",
                            SecondBody = "",
                            SecondImagePath = "",
                            StoryBody = ""
                        },
                        new
                        {
                            Id = new Guid("1b0d2143-b66a-41b5-85ae-c7bdc6e8ca4f"),
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstBody = "",
                            FirstImagePath = "",
                            LanguageKey = "tr",
                            MetaDescription = "",
                            MetaKeys = "",
                            MetaTitle = "",
                            SecondBody = "",
                            SecondImagePath = "",
                            StoryBody = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.ContactUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Emails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Email");

                    b.Property<string>("FacebookAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("FacebookAddress");

                    b.Property<string>("InstagramAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("InstagramAddress");

                    b.Property<string>("LinkedinAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("LinkedinAddress");

                    b.Property<string>("MapX")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MapX");

                    b.Property<string>("MapY")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MapY");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Phone");

                    b.Property<string>("TikTokAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("TikTokAddress");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("WhatsappNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("WhatsappNumber");

                    b.HasKey("Id");

                    b.ToTable("ContactUs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2be6044a-deea-4b46-a7a6-4beef40db34e"),
                            Address = "",
                            CreatedDate = new DateTime(2025, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emails = "noreply@carlog.com",
                            FacebookAddress = "https://www.facebook.com/",
                            InstagramAddress = "https://www.instagram.com/",
                            LinkedinAddress = "https://linkedin.com/",
                            MapX = "40.409264",
                            MapY = "49.867092",
                            Phones = "+99 (0) 101 0000 888",
                            TikTokAddress = "https://tiktok.com",
                            WhatsappNumber = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ImagePath");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("Price");

                    b.Property<int>("SpecialOrder")
                        .HasColumnType("integer")
                        .HasColumnName("SpecialOrder");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<int>("SpecialOrder")
                        .HasColumnType("integer")
                        .HasColumnName("SpecialOrder");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("ImagePath");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Order");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Key");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("IX_Settings_Key");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("632a5639-59c9-4922-a8ec-145b6d23631d"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "header_logo",
                            Type = 4,
                            Value = "header_logo"
                        },
                        new
                        {
                            Id = new Guid("490ed2ac-ddaf-4cc3-9d63-17d3522f4823"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "header_logo_width",
                            Type = 1,
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("8a8bfa84-2c93-4055-a4c5-00ac6b35aec2"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "header_logo_height",
                            Type = 1,
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("bababe10-ee71-44a1-ada3-f41253b1f316"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "footer_logo",
                            Type = 4,
                            Value = "footer_logo"
                        },
                        new
                        {
                            Id = new Guid("6414c07a-5c40-4dc6-bdfa-3f32e5e97812"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "footer_logo_width",
                            Type = 1,
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("c4dc12b4-50a0-4fc6-bd5c-d33216149c23"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "footer_logo_height",
                            Type = 1,
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("575911e7-7965-4aaf-9731-2d1289b81158"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "favicon_logo",
                            Type = 4,
                            Value = "favicon_logo"
                        },
                        new
                        {
                            Id = new Guid("ae7654ac-63ca-432d-908d-5c738f2b5ddd"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "main_color",
                            Type = 2,
                            Value = "#03A297"
                        },
                        new
                        {
                            Id = new Guid("f194dffe-82fa-42e3-8528-ebeced4d48cd"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "secondary_color",
                            Type = 2,
                            Value = "#023350"
                        },
                        new
                        {
                            Id = new Guid("b76612b2-d3f8-4bb2-a3f6-996be9fdd628"),
                            Comment = "",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "third_color",
                            Type = 2,
                            Value = "#ffffff"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ImagePath");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Order");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Sliders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SliderImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ImagePath");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("Order");

                    b.Property<Guid>("SliderId")
                        .HasColumnType("uuid")
                        .HasColumnName("SliderId");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("SliderImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TextTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Key");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("TextTranslations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Translations.ContactUsTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ContactUsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("Description");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MetaDescription");

                    b.Property<string>("MetaKeys")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MetaKeys");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("MetaTitle");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("WorkingHours");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsId", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("IX_ContactUsTranslations_ContactUsId_LanguageKey");

                    b.ToTable("ContactUsTranslations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Translations.ProductCategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductCategoryTranslations_CategoryId_LanguageKey");

                    b.ToTable("ProductCategoryTranslations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Translations.ProductTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("Description");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ShortDescription");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductTranslations_ProductId_LanguageKey");

                    b.ToTable("ProductTranslations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Translations.SliderTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("LanguageKey");

                    b.Property<Guid>("SliderId")
                        .HasColumnType("uuid")
                        .HasColumnName("SliderId");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SliderId", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("IX_SliderTranslations_SliderId_LanguageKey");

                    b.ToTable("SliderTranslations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.SliderImage", b =>
                {
                    b.HasOne("Domain.Entities.Slider", "Slider")
                        .WithMany("Images")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("Domain.Entities.Translations.ContactUsTranslation", b =>
                {
                    b.HasOne("Domain.Entities.ContactUs", "ContactUs")
                        .WithMany("Translations")
                        .HasForeignKey("ContactUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("Domain.Entities.Translations.ProductCategoryTranslation", b =>
                {
                    b.HasOne("Domain.Entities.ProductCategory", "Category")
                        .WithMany("Translations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Translations.ProductTranslation", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Translations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Translations.SliderTranslation", b =>
                {
                    b.HasOne("Domain.Entities.Slider", "Slider")
                        .WithMany("Translations")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("Domain.Entities.ContactUs", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Domain.Entities.Slider", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
